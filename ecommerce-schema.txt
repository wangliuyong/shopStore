query adminbyid($id: ID) {
    adminbyid: admin_by_id(id: $id) {
        id
        openid
        username
        password
        telephone
        email
        createdAt
        updatedAt
    }
}

query orderPaybyprops($user_id: String, $order_id: String, $totalPay: Float, $transactionId: String, $payTime: String) {
    orderPaybyprops: orderPay_by_props(user_id: $user_id order_id: $order_id totalPay: $totalPay transactionId: $transactionId payTime: $payTime) {
        id
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        totalPay
        transactionId
        payTime
    }
}

query userCartbyid($id: ID) {
    userCartbyid: userCart_by_id(id: $id) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        count
        createdAt
        updatedAt
    }
}

query userDatabyid($id: ID) {
    userDatabyid: userData_by_id(id: $id) {
        id
        nickname
        avatar
        isVip
        vipCode
        userPoint
        createdAt
        updatedAt
    }
}

query adminbyprops($openid: String, $username: String, $password: String, $telephone: String, $email: String, $createdAt: String, $updatedAt: String) {
    adminbyprops: admin_by_props(openid: $openid username: $username password: $password telephone: $telephone email: $email createdAt: $createdAt updatedAt: $updatedAt) {
        id
        openid
        username
        password
        telephone
        email
        createdAt
        updatedAt
    }
}

query userSearchbyprops($user_id: String, $createdAt: String, $updatedAt: String) {
    userSearchbyprops: userSearch_by_props(user_id: $user_id createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        keyword
        createdAt
        updatedAt
    }
}

query userCollectbyprops($user_id: String, $createdAt: String, $updatedAt: String) {
    userCollectbyprops: userCollect_by_props(user_id: $user_id createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        createdAt
        updatedAt
    }
}

query productbyprops($category: String, $updatedAt: String, $name: String, $createdAt: String, $status: String, $intro: String, $price: Float, $img: String, $stock: Int) {
    productbyprops: product_by_props(category: $category updatedAt: $updatedAt name: $name createdAt: $createdAt status: $status intro: $intro price: $price img: $img stock: $stock) {
        category
        updatedAt
        unit
        name
        createdAt
        status
        id
        intro
        price
        img
        stock
    }
}

query orderLogisticsbyid($id: ID) {
    orderLogisticsbyid: orderLogistics_by_id(id: $id) {
        updatedAt
        logisticsFee
        expressId
        createdAt
        consigneeTel
        id
        consignAddress
        LogisticsStatus
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        consigneeName
    }
}

query orderProductbyid($id: ID) {
    orderProductbyid: orderProduct_by_id(id: $id) {
        remark
        updatedAt
        unit
        orderPay
        createdAt
        productImg
        productName
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        productPrice
        id
        count
        productPay
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
    }
}

query userCollectbyid($id: ID) {
    userCollectbyid: userCollect_by_id(id: $id) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        createdAt
        updatedAt
    }
}

query userAddressbyprops($address: String, $updatedAt: String, $telephone: String, $default: Int, $city: String, $username: String, $postcode: String, $user_id: String, $area: String, $deleteddAt: String, $province: String) {
    userAddressbyprops: userAddress_by_props(address: $address updatedAt: $updatedAt telephone: $telephone
        default: $default city: $city username: $username postcode: $postcode user_id: $user_id area: $area deleteddAt: $deleteddAt province: $province) {
        address
        updatedAt
        telephone
        default
        city
        username
        postcode
        createdAt
        id
        user_id
        area
        deleteddAt
        province
    }
}

query orderPaybyid($id: ID) {
    orderPaybyid: orderPay_by_id(id: $id) {
        id
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        totalPay
        transactionId
        payTime
    }
}

query userAddressbyid($id: ID) {
    userAddressbyid: userAddress_by_id(id: $id) {
        address
        updatedAt
        telephone
        default
        city
        username
        postcode
        createdAt
        id
        user_id
        area
        deleteddAt
        province
    }
}

query orderLogisticsbyprops($updatedAt: String, $expressId: String, $createdAt: String, $order_id: String, $consigneeTel: String, $consignAddress: String, $user_id: String, $consigneeName: String) {
    orderLogisticsbyprops: orderLogistics_by_props(updatedAt: $updatedAt expressId: $expressId createdAt: $createdAt order_id: $order_id consigneeTel: $consigneeTel consignAddress: $consignAddress user_id: $user_id consigneeName: $consigneeName) {
        updatedAt
        logisticsFee
        expressId
        createdAt
        consigneeTel
        id
        consignAddress
        LogisticsStatus
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        consigneeName
    }
}

query orderbyid($id: ID) {
    orderbyid: order_by_id(id: $id) {
        deliveryTime
        updatedAt
        payTime
        orderPay {
            id
            user_id

            totalPay
            transactionId
            payTime
        }
        orderLogistics {
            updatedAt
            logisticsFee
            expressId
            createdAt
            consigneeTel
            id
            consignAddress
            LogisticsStatus
            user_id

            consigneeName
        }
        orderTotalPay
        createdAt
        orderStatus
        id
        orderShipFee
        count
        user_id
        productTotalPay
    }
}

query orderProductbyprops($updatedAt: String, $unit: String, $product_id: String, $orderPay: Float, $createdAt: String, $user_id: String, $order_id: String, $count: Int) {
    orderProductbyprops: orderProduct_by_props(updatedAt: $updatedAt unit: $unit product_id: $product_id orderPay: $orderPay createdAt: $createdAt user_id: $user_id order_id: $order_id count: $count) {
        remark
        updatedAt
        unit
        orderPay
        createdAt
        productImg
        productName
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        productPrice
        id
        count
        productPay
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
    }
}

query productbyid($id: ID) {
    productbyid: product_by_id(id: $id) {
        category
        updatedAt
        unit
        name
        createdAt
        status
        id
        intro
        price
        img
        stock
    }
}

query userSearchbyid($id: ID) {
    userSearchbyid: userSearch_by_id(id: $id) {
        id
        user_id
        keyword
        createdAt
        updatedAt
    }
}

query userDatabyprops($nickname: String, $avatar: String, $isVip: Boolean, $vipCode: String, $userPoint: Int, $createdAt: String, $updatedAt: String) {
    userDatabyprops: userData_by_props(nickname: $nickname avatar: $avatar isVip: $isVip vipCode: $vipCode userPoint: $userPoint createdAt: $createdAt updatedAt: $updatedAt) {
        id
        nickname
        avatar
        isVip
        vipCode
        userPoint
        createdAt
        updatedAt
    }
}

query userCartbyprops($user_id: String, $product_id: String, $count: Int, $createdAt: String, $updatedAt: String) {
    userCartbyprops: userCart_by_props(user_id: $user_id product_id: $product_id count: $count createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        count
        createdAt
        updatedAt
    }
}

query userbyprops($openid: String, $username: String, $password: String, $telephone: String, $email: String, $userData_id: String, $createdAt: String, $updatedAt: String) {
    userbyprops: user_by_props(openid: $openid username: $username password: $password telephone: $telephone email: $email userData_id: $userData_id createdAt: $createdAt updatedAt: $updatedAt) {
        openid
        username
        password
        telephone
        email
        userData {
            id
            nickname
            avatar
            isVip
            vipCode
            userPoint
            createdAt
            updatedAt
        }
        createdAt
        updatedAt
    }
}

query orderbyprops($deliveryTime: String, $updatedAt: String, $orderLogistics_id: String, $payTime: String, $orderTotalPay: Float, $createdAt: String, $orderStatus: String, $orderShipFee: Float, $count: Int, $user_id: String, $productTotalPay: Float, $orderPay_id: String) {
    orderbyprops: order_by_props(deliveryTime: $deliveryTime updatedAt: $updatedAt orderLogistics_id: $orderLogistics_id payTime: $payTime orderTotalPay: $orderTotalPay createdAt: $createdAt orderStatus: $orderStatus orderShipFee: $orderShipFee count: $count user_id: $user_id productTotalPay: $productTotalPay orderPay_id: $orderPay_id) {
        deliveryTime
        updatedAt
        payTime
        orderPay {
            id
            user_id

            totalPay
            transactionId
            payTime
        }
        orderLogistics {
            updatedAt
            logisticsFee
            expressId
            createdAt
            consigneeTel
            id
            consignAddress
            LogisticsStatus
            user_id

            consigneeName
        }
        orderTotalPay
        createdAt
        orderStatus
        id
        orderShipFee
        count
        user_id
        productTotalPay
    }
}

mutation createorderPay($id: ID!, $user_id: String!, $order_id: String!, $totalPay: Float!, $transactionId: String!, $payTime: String!) {
    createorderPay: create_orderPay(id: $id user_id: $user_id order_id: $order_id totalPay: $totalPay transactionId: $transactionId payTime: $payTime) {
        id
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        totalPay
        transactionId
        payTime
    }
}

mutation createuser($openid: String, $username: String, $password: String, $telephone: String, $email: String, $userData_id: String, $createdAt: String, $updatedAt: String) {
    createuser: create_user(openid: $openid username: $username password: $password telephone: $telephone email: $email userData_id: $userData_id createdAt: $createdAt updatedAt: $updatedAt) {
        openid
        username
        password
        telephone
        email
        userData {
            id
            nickname
            avatar
            isVip
            vipCode
            userPoint
            createdAt
            updatedAt
        }
        createdAt
        updatedAt
    }
}

mutation updateproduct($category: String, $updatedAt: String, $unit: Int, $name: String, $createdAt: String, $status: String, $id: ID!, $intro: String, $price: Float, $img: String, $stock: Int) {
    updateproduct: update_product(category: $category updatedAt: $updatedAt unit: $unit name: $name createdAt: $createdAt status: $status id: $id intro: $intro price: $price img: $img stock: $stock) {
        category
        updatedAt
        unit
        name
        createdAt
        status
        id
        intro
        price
        img
        stock
    }
}

mutation updateuserData($id: ID!, $nickname: String, $avatar: String, $isVip: Boolean, $vipCode: String, $userPoint: Int, $createdAt: String, $updatedAt: String) {
    updateuserData: update_userData(id: $id nickname: $nickname avatar: $avatar isVip: $isVip vipCode: $vipCode userPoint: $userPoint createdAt: $createdAt updatedAt: $updatedAt) {
        id
        nickname
        avatar
        isVip
        vipCode
        userPoint
        createdAt
        updatedAt
    }
}

mutation createuserCollect($id: ID!, $user_id: String!, $product_id: Int!, $createdAt: String!, $updatedAt: String) {
    createuserCollect: create_userCollect(id: $id user_id: $user_id product_id: $product_id createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        createdAt
        updatedAt
    }
}

mutation createuserAddress($address: String!, $updatedAt: String, $telephone: String!, $default: Int, $city: String!, $username: String!, $postcode: String, $id: ID!, $user_id: String!, $area: String!, $deleteddAt: String, $province: String!) {
    createuserAddress: create_userAddress(address: $address updatedAt: $updatedAt telephone: $telephone
        default: $default city: $city username: $username postcode: $postcode id: $id user_id: $user_id area: $area deleteddAt: $deleteddAt province: $province) {
        address
        updatedAt
        telephone
        default
        city
        username
        postcode
        createdAt
        id
        user_id
        area
        deleteddAt
        province
    }
}

mutation deleteuserCart($id: ID, $user_id: String, $product_id: String, $count: Int, $createdAt: String, $updatedAt: String) {
    deleteuserCart: delete_userCart(id: $id user_id: $user_id product_id: $product_id count: $count createdAt: $createdAt updatedAt: $updatedAt)
}

mutation updateuserAddress($address: String, $updatedAt: String, $telephone: String, $default: Int, $city: String, $username: String, $postcode: String, $id: ID!, $user_id: String, $area: String, $deleteddAt: String, $province: String) {
    updateuserAddress: update_userAddress(address: $address updatedAt: $updatedAt telephone: $telephone
        default: $default city: $city username: $username postcode: $postcode id: $id user_id: $user_id area: $area deleteddAt: $deleteddAt province: $province) {
        address
        updatedAt
        telephone
        default
        city
        username
        postcode
        createdAt
        id
        user_id
        area
        deleteddAt
        province
    }
}

mutation updateadmin($id: ID!, $openid: String, $username: String, $password: String, $telephone: String, $email: String, $createdAt: String, $updatedAt: String) {
    updateadmin: update_admin(id: $id openid: $openid username: $username password: $password telephone: $telephone email: $email createdAt: $createdAt updatedAt: $updatedAt) {
        id
        openid
        username
        password
        telephone
        email
        createdAt
        updatedAt
    }
}

mutation createuserSearch($id: ID!, $user_id: String!, $createdAt: String!, $updatedAt: String) {
    createuserSearch: create_userSearch(id: $id user_id: $user_id createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        keyword
        createdAt
        updatedAt
    }
}

mutation createproduct($category: String!, $updatedAt: String, $unit: Int!, $name: String!, $createdAt: String!, $status: String, $id: ID!, $intro: String, $price: Float!, $img: String, $stock: Int) {
    createproduct: create_product(category: $category updatedAt: $updatedAt unit: $unit name: $name createdAt: $createdAt status: $status id: $id intro: $intro price: $price img: $img stock: $stock) {
        category
        updatedAt
        unit
        name
        createdAt
        status
        id
        intro
        price
        img
        stock
    }
}

mutation deleteuserData($id: ID, $nickname: String, $avatar: String, $isVip: Boolean, $vipCode: String, $userPoint: Int, $createdAt: String, $updatedAt: String) {
    deleteuserData: delete_userData(id: $id nickname: $nickname avatar: $avatar isVip: $isVip vipCode: $vipCode userPoint: $userPoint createdAt: $createdAt updatedAt: $updatedAt)
}

mutation deleteorderProduct($updatedAt: String, $unit: String, $product_id: String, $orderPay: Float, $createdAt: String, $order_id: String, $id: ID, $count: Int, $user_id: String) {
    deleteorderProduct: delete_orderProduct(updatedAt: $updatedAt unit: $unit product_id: $product_id orderPay: $orderPay createdAt: $createdAt order_id: $order_id id: $id count: $count user_id: $user_id)
}

mutation deleteuserCollect($id: ID, $user_id: String, $createdAt: String, $updatedAt: String) {
    deleteuserCollect: delete_userCollect(id: $id user_id: $user_id createdAt: $createdAt updatedAt: $updatedAt)
}

mutation updateuserCollect($id: ID!, $user_id: String, $product_id: Int, $createdAt: String, $updatedAt: String) {
    updateuserCollect: update_userCollect(id: $id user_id: $user_id product_id: $product_id createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        createdAt
        updatedAt
    }
}

mutation deleteorder($deliveryTime: String, $updatedAt: String, $orderLogistics_id: String, $payTime: String, $orderTotalPay: Float, $createdAt: String, $orderStatus: String, $id: ID, $orderShipFee: Float, $count: Int, $user_id: String, $productTotalPay: Float, $orderPay_id: String) {
    deleteorder: delete_order(deliveryTime: $deliveryTime updatedAt: $updatedAt orderLogistics_id: $orderLogistics_id payTime: $payTime orderTotalPay: $orderTotalPay createdAt: $createdAt orderStatus: $orderStatus id: $id orderShipFee: $orderShipFee count: $count user_id: $user_id productTotalPay: $productTotalPay orderPay_id: $orderPay_id)
}

mutation deleteadmin($id: ID, $openid: String, $username: String, $password: String, $telephone: String, $email: String, $createdAt: String, $updatedAt: String) {
    deleteadmin: delete_admin(id: $id openid: $openid username: $username password: $password telephone: $telephone email: $email createdAt: $createdAt updatedAt: $updatedAt)
}

mutation deleteuserAddress($address: String, $updatedAt: String, $telephone: String, $default: Int, $city: String, $username: String, $postcode: String, $id: ID, $user_id: String, $area: String, $deleteddAt: String, $province: String) {
    deleteuserAddress: delete_userAddress(address: $address updatedAt: $updatedAt telephone: $telephone
        default: $default city: $city username: $username postcode: $postcode id: $id user_id: $user_id area: $area deleteddAt: $deleteddAt province: $province)
}

mutation updateuserCart($id: ID!, $user_id: String, $product_id: String, $count: Int, $createdAt: String, $updatedAt: String) {
    updateuserCart: update_userCart(id: $id user_id: $user_id product_id: $product_id count: $count createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        count
        createdAt
        updatedAt
    }
}

mutation deleteuser($openid: String, $username: String, $password: String, $telephone: String, $email: String, $userData_id: String, $createdAt: String, $updatedAt: String) {
    deleteuser: delete_user(openid: $openid username: $username password: $password telephone: $telephone email: $email userData_id: $userData_id createdAt: $createdAt updatedAt: $updatedAt)
}

mutation createuserCart($id: ID!, $user_id: String!, $product_id: String!, $count: Int!, $createdAt: String!, $updatedAt: String) {
    createuserCart: create_userCart(id: $id user_id: $user_id product_id: $product_id count: $count createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        count
        createdAt
        updatedAt
    }
}

mutation createuserData($id: ID!, $nickname: String, $avatar: String, $isVip: Boolean, $vipCode: String, $userPoint: Int, $createdAt: String, $updatedAt: String) {
    createuserData: create_userData(id: $id nickname: $nickname avatar: $avatar isVip: $isVip vipCode: $vipCode userPoint: $userPoint createdAt: $createdAt updatedAt: $updatedAt) {
        id
        nickname
        avatar
        isVip
        vipCode
        userPoint
        createdAt
        updatedAt
    }
}

mutation createorder($deliveryTime: String, $updatedAt: String, $orderLogistics_id: String, $payTime: String, $orderTotalPay: Float!, $createdAt: String!, $orderStatus: String!, $id: ID!, $orderShipFee: Float, $count: Int!, $user_id: String!, $productTotalPay: Float!, $orderPay_id: String!) {
    createorder: create_order(deliveryTime: $deliveryTime updatedAt: $updatedAt orderLogistics_id: $orderLogistics_id payTime: $payTime orderTotalPay: $orderTotalPay createdAt: $createdAt orderStatus: $orderStatus id: $id orderShipFee: $orderShipFee count: $count user_id: $user_id productTotalPay: $productTotalPay orderPay_id: $orderPay_id) {
        deliveryTime
        updatedAt
        payTime
        orderPay {
            id
            user_id

            totalPay
            transactionId
            payTime
        }
        orderLogistics {
            updatedAt
            logisticsFee
            expressId
            createdAt
            consigneeTel
            id
            consignAddress
            LogisticsStatus
            user_id

            consigneeName
        }
        orderTotalPay
        createdAt
        orderStatus
        id
        orderShipFee
        count
        user_id
        productTotalPay
    }
}

mutation deleteuserSearch($id: ID, $user_id: String, $createdAt: String, $updatedAt: String) {
    deleteuserSearch: delete_userSearch(id: $id user_id: $user_id createdAt: $createdAt updatedAt: $updatedAt)
}

mutation deleteorderPay($id: ID, $user_id: String, $order_id: String, $totalPay: Float, $transactionId: String, $payTime: String) {
    deleteorderPay: delete_orderPay(id: $id user_id: $user_id order_id: $order_id totalPay: $totalPay transactionId: $transactionId payTime: $payTime)
}

mutation updateorderPay($id: ID!, $user_id: String, $order_id: String, $totalPay: Float, $transactionId: String, $payTime: String) {
    updateorderPay: update_orderPay(id: $id user_id: $user_id order_id: $order_id totalPay: $totalPay transactionId: $transactionId payTime: $payTime) {
        id
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        totalPay
        transactionId
        payTime
    }
}

mutation deleteorderLogistics($updatedAt: String, $expressId: String, $createdAt: String, $order_id: String, $consigneeTel: String, $id: ID, $consignAddress: String, $user_id: String, $consigneeName: String) {
    deleteorderLogistics: delete_orderLogistics(updatedAt: $updatedAt expressId: $expressId createdAt: $createdAt order_id: $order_id consigneeTel: $consigneeTel id: $id consignAddress: $consignAddress user_id: $user_id consigneeName: $consigneeName)
}

mutation updateuserSearch($id: ID!, $user_id: String, $createdAt: String, $updatedAt: String) {
    updateuserSearch: update_userSearch(id: $id user_id: $user_id createdAt: $createdAt updatedAt: $updatedAt) {
        id
        user_id
        keyword
        createdAt
        updatedAt
    }
}

mutation updateorder($deliveryTime: String, $updatedAt: String, $orderLogistics_id: String, $payTime: String, $orderTotalPay: Float, $createdAt: String, $orderStatus: String, $id: ID!, $orderShipFee: Float, $count: Int, $user_id: String, $productTotalPay: Float, $orderPay_id: String) {
    updateorder: update_order(deliveryTime: $deliveryTime updatedAt: $updatedAt orderLogistics_id: $orderLogistics_id payTime: $payTime orderTotalPay: $orderTotalPay createdAt: $createdAt orderStatus: $orderStatus id: $id orderShipFee: $orderShipFee count: $count user_id: $user_id productTotalPay: $productTotalPay orderPay_id: $orderPay_id) {
        deliveryTime
        updatedAt
        payTime
        orderPay {
            id
            user_id

            totalPay
            transactionId
            payTime
        }
        orderLogistics {
            updatedAt
            logisticsFee
            expressId
            createdAt
            consigneeTel
            id
            consignAddress
            LogisticsStatus
            user_id

            consigneeName
        }
        orderTotalPay
        createdAt
        orderStatus
        id
        orderShipFee
        count
        user_id
        productTotalPay
    }
}

mutation createorderLogistics($updatedAt: String, $expressId: String!, $createdAt: String!, $order_id: String!, $consigneeTel: String!, $id: ID!, $consignAddress: String!, $user_id: String!, $consigneeName: String!) {
    createorderLogistics: create_orderLogistics(updatedAt: $updatedAt expressId: $expressId createdAt: $createdAt order_id: $order_id consigneeTel: $consigneeTel id: $id consignAddress: $consignAddress user_id: $user_id consigneeName: $consigneeName) {
        updatedAt
        logisticsFee
        expressId
        createdAt
        consigneeTel
        id
        consignAddress
        LogisticsStatus
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        consigneeName
    }
}

mutation updateorderLogistics($updatedAt: String, $expressId: String, $createdAt: String, $order_id: String, $consigneeTel: String, $id: ID!, $consignAddress: String, $user_id: String, $consigneeName: String) {
    updateorderLogistics: update_orderLogistics(updatedAt: $updatedAt expressId: $expressId createdAt: $createdAt order_id: $order_id consigneeTel: $consigneeTel id: $id consignAddress: $consignAddress user_id: $user_id consigneeName: $consigneeName) {
        updatedAt
        logisticsFee
        expressId
        createdAt
        consigneeTel
        id
        consignAddress
        LogisticsStatus
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
        consigneeName
    }
}

mutation createorderProduct($updatedAt: String, $unit: String!, $product_id: String!, $orderPay: Float!, $createdAt: String!, $order_id: String!, $id: ID!, $count: Int!, $user_id: String!) {
    createorderProduct: create_orderProduct(updatedAt: $updatedAt unit: $unit product_id: $product_id orderPay: $orderPay createdAt: $createdAt order_id: $order_id id: $id count: $count user_id: $user_id) {
        remark
        updatedAt
        unit
        orderPay
        createdAt
        productImg
        productName
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        productPrice
        id
        count
        productPay
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
    }
}

mutation deleteproduct($category: String, $updatedAt: String, $name: String, $createdAt: String, $status: String, $id: ID, $intro: String, $price: Float, $img: String, $stock: Int) {
    deleteproduct: delete_product(category: $category updatedAt: $updatedAt name: $name createdAt: $createdAt status: $status id: $id intro: $intro price: $price img: $img stock: $stock)
}

mutation updateorderProduct($updatedAt: String, $unit: String, $product_id: String, $orderPay: Float, $createdAt: String, $order_id: String, $id: ID!, $count: Int, $user_id: String) {
    updateorderProduct: update_orderProduct(updatedAt: $updatedAt unit: $unit product_id: $product_id orderPay: $orderPay createdAt: $createdAt order_id: $order_id id: $id count: $count user_id: $user_id) {
        remark
        updatedAt
        unit
        orderPay
        createdAt
        productImg
        productName
        product {
            category
            updatedAt
            unit
            name
            createdAt
            status
            id
            intro
            price
            img
            stock
        }
        productPrice
        id
        count
        productPay
        user_id
        order {
            deliveryTime
            updatedAt
            payTime


            orderTotalPay
            createdAt
            orderStatus
            id
            orderShipFee
            count
            user_id
            productTotalPay
        }
    }
}

mutation createadmin($id: ID!, $openid: String, $username: String, $password: String, $telephone: String, $email: String, $createdAt: String, $updatedAt: String) {
    createadmin: create_admin(id: $id openid: $openid username: $username password: $password telephone: $telephone email: $email createdAt: $createdAt updatedAt: $updatedAt) {
        id
        openid
        username
        password
        telephone
        email
        createdAt
        updatedAt
    }
}